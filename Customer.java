/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.food_delivery;

import com.mycompany.food_delivery.MenuFrame;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;

/**
 *
 * @author karpa
 */
public class Customer extends javax.swing.JFrame {
    Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
    
    String custID;
    String restID;
    /**
     * Creates new form Customer
     */
     public Customer()
     {
         initComponents();
     }
    public Customer(String custID) {
        this.custID = custID;
        initComponents();
        try{
            Class.forName("oracle.jdbc.OracleDriver");
            //JOptionPane.showMessageDialog(this,"Driver Loaded!");
            try 
            {
                //con = DriverManager.getConnection("jdbc:oracle:thin:@10.6.4.33:1521:orcl",
                //        "cse1054","ssn");
                con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl",
                        "user","pwd!");
                //JOptionPane.showMessageDialog(this,"Connected to Oracle database!");
            }
            catch (SQLException ex) 
            {
                Logger.getLogger(Customer.class.getName()).log(Level.SEVERE,null, ex);
                JOptionPane.showMessageDialog(this,ex.getMessage());
            }
        }
        catch(ClassNotFoundException ex){
        Logger.getLogger(Customer.class.getName()).log(Level.SEVERE,null, ex);
        JOptionPane.showMessageDialog(this,ex.getMessage());

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        restaurantList = new javax.swing.JList<>();
        Clear = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        urord = new javax.swing.JButton();
        search_val = new javax.swing.JTextField();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        restaurantList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        restaurantList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                restaurantListMouseClicked(evt);
            }
        });
        restaurantList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                restaurantListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(restaurantList);

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        urord.setText("Your Orders");
        urord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urordActionPerformed(evt);
            }
        });

        search_val.setText("Enter restaurant name or food name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(urord, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(search_val, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(search)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urord, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void displayRestaurants(ResultSet rs) throws SQLException {
        StringBuilder result = new StringBuilder("Search Results:\n\n");
        do {
            result.append("Restaurant ID: ").append(rs.getString("restaurant_id")).append("\n");
            result.append("Name: ").append(rs.getString("name")).append("\n");
            result.append("Block Number: ").append(rs.getString("block_num")).append("\n");
            result.append("Street: ").append(rs.getString("street")).append("\n");
            result.append("Area: ").append(rs.getString("area")).append("\n");
            result.append("Pincode: ").append(rs.getString("pincode")).append("\n");
            result.append("Phone Number: ").append(rs.getString("phone_num")).append("\n\n");
        } while (rs.next());
        JOptionPane.showMessageDialog(this, result.toString());
    }
    
    
    

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        try {
        String searchStr = search_val.getText().toLowerCase();

        // Query to search for restaurants by name (case insensitive)
        String restaurantQuery = "SELECT name FROM Restaurants WHERE LOWER(name) LIKE LOWER(?)";
        ps = con.prepareStatement(restaurantQuery);
        ps.setString(1, "%" + searchStr + "%");
        rs = ps.executeQuery();

        DefaultListModel<String> listModel = new DefaultListModel<>();

        while (rs.next()) {
            listModel.addElement(rs.getString("name"));
        }

        // Query to search for restaurants by item name (case insensitive)
        String foodQuery = "SELECT DISTINCT r.name FROM Restaurants r "
                         + "JOIN Menu m ON r.restaurant_id = m.restaurant_id "
                         + "JOIN Items i ON m.item_id = i.item_id "
                         + "WHERE LOWER(i.item_name) LIKE LOWER(?)";
        ps = con.prepareStatement(foodQuery);
        ps.setString(1, "%" + searchStr + "%");
        rs = ps.executeQuery();

        while (rs.next()) {
            String restaurantName = rs.getString("name");
            if (!listModel.contains(restaurantName)) {
                listModel.addElement(restaurantName);
            }
        }

        // Query to search for restaurants by item type (case insensitive)
        String typeQuery = "SELECT DISTINCT r.name FROM Restaurants r "
                         + "JOIN Menu m ON r.restaurant_id = m.restaurant_id "
                         + "JOIN Items i ON m.item_id = i.item_id "
                         + "WHERE LOWER(i.type) LIKE LOWER(?)";
        ps = con.prepareStatement(typeQuery);
        ps.setString(1, "%" + searchStr + "%");
        rs = ps.executeQuery();

        while (rs.next()) {
            String restaurantName = rs.getString("name");
            if (!listModel.contains(restaurantName)) {
                listModel.addElement(restaurantName);
            }
        }

        restaurantList.setModel(listModel); // Set the model to the JList

        if (listModel.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No restaurants or food items found matching the search value.");
        }
    } catch (SQLException ex) {
        Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
    }//GEN-LAST:event_searchActionPerformed

    private void restaurantListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_restaurantListValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting()) {
        String selectedRestaurant = restaurantList.getSelectedValue();
        if (selectedRestaurant != null) {
            try{
                String menuQuery = "SELECT restaurant_id FROM Restaurants where name = ? ";
                ps = con.prepareStatement(menuQuery);
                ps.setString(1, selectedRestaurant);
                rs = ps.executeQuery();
                if(rs.next())
                {
                    this.restID = rs.getString("restaurant_id");
                }
            }
            catch (SQLException ex) {
                Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            try {
                String menuQuery = "SELECT i.item_name, m.price, m.description FROM Menu m " +
                                   "JOIN Items i ON m.item_id = i.item_id " +
                                   "JOIN Restaurants r ON m.restaurant_id = r.restaurant_id " +
                                   "WHERE r.name = ?";
                ps = con.prepareStatement(menuQuery);
                ps.setString(1, selectedRestaurant);
                rs = ps.executeQuery();

                java.util.List<String[]> menuList = new java.util.ArrayList<>();
                while (rs.next()) {
                    String[] item = {
                        rs.getString("item_name"),
                        rs.getString("price"),
                        rs.getString("description")
                    };
                    menuList.add(item);
                }

                String[][] menuData = new String[menuList.size()][3];
                for (int i = 0; i < menuList.size(); i++) {
                    menuData[i] = menuList.get(i);
                }

                // Open MenuFrame and pass the menu data
                MenuFrame menuFrame = new MenuFrame(menuData, selectedRestaurant, this, this.custID, this.restID);
                menuFrame.setVisible(true);
                this.setVisible(false);

            } catch (SQLException ex) {
                Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }
    }//GEN-LAST:event_restaurantListValueChanged

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        search_val.setText("");
    
    // Clear the list of restaurants
    DefaultListModel<String> emptyModel = new DefaultListModel<>();
    restaurantList.setModel(emptyModel);
    
    }//GEN-LAST:event_ClearActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        existing_customer logframe = new existing_customer();
        logframe.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutActionPerformed

    private void restaurantListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restaurantListMouseClicked
    }//GEN-LAST:event_restaurantListMouseClicked

    private void urordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urordActionPerformed
        // TODO add your handling code here:
        OrderFrame ordFrame = new OrderFrame(this, this.custID);
        ordFrame.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_urordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logout;
    private javax.swing.JList<String> restaurantList;
    private javax.swing.JButton search;
    private javax.swing.JTextField search_val;
    private javax.swing.JButton urord;
    // End of variables declaration//GEN-END:variables
}


