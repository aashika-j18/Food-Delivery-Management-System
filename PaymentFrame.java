/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.food_delivery;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author karpa
 */
public class PaymentFrame extends javax.swing.JFrame {
    Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
    private CartFramee prevFrame;
    private java.util.List<String[]> cartItems = new ArrayList<>();
    String custID;
    String restID;
    String dID;
    String orderID;
    Customer cusFrame;
    
    /**
     * Creates new form PaymentFrame
     */
    public PaymentFrame(){
        initComponents();
        
    }
    
    public PaymentFrame(CartFramee prevFrame, java.util.List<String[]> cartItems, String custID, String restID, Customer cusFrame) {
        this.prevFrame = prevFrame;
        this.cartItems = cartItems;
        this.custID = custID;
        this.restID = restID;
        this.cusFrame = cusFrame;
        initComponents();
        try{
            Class.forName("oracle.jdbc.OracleDriver");
            //JOptionPane.showMessageDialog(this,"Driver Loaded!");
            try 
            {
                //con = DriverManager.getConnection("jdbc:oracle:thin:@10.6.4.33:1521:orcl",
                //        "cse1054","ssn");
                con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl",
                        "user","pwd!");
                //JOptionPane.showMessageDialog(this,"Connected to Oracle database!");
            }
            catch (SQLException ex) 
            {
                Logger.getLogger(Customer.class.getName()).log(Level.SEVERE,null, ex);
                JOptionPane.showMessageDialog(this,ex.getMessage());
            }
        }
        catch(ClassNotFoundException ex){
        Logger.getLogger(Customer.class.getName()).log(Level.SEVERE,null, ex);
        JOptionPane.showMessageDialog(this,ex.getMessage());

        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        debit = new javax.swing.JButton();
        credit = new javax.swing.JButton();
        UPI = new javax.swing.JButton();
        cash = new javax.swing.JButton();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Choose your prefered way of payment");

        debit.setText("Debit Card");
        debit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debitActionPerformed(evt);
            }
        });

        credit.setText("Credit Card");
        credit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditActionPerformed(evt);
            }
        });

        UPI.setText("UPI");
        UPI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPIActionPerformed(evt);
            }
        });

        cash.setText("Cash ");
        cash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(back)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(159, 159, 159)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(71, 71, 71)
                            .addComponent(debit)
                            .addGap(61, 61, 61)
                            .addComponent(credit)
                            .addGap(65, 65, 65)
                            .addComponent(UPI)
                            .addGap(72, 72, 72)
                            .addComponent(cash))))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debit)
                    .addComponent(credit)
                    .addComponent(UPI)
                    .addComponent(cash))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 245, Short.MAX_VALUE)
                .addComponent(back)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void debitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debitActionPerformed
        // TODO add your handling code here:
        CardPaymentFrame cardPaymentFrame = new CardPaymentFrame("Debit Card", cartItems, custID, restID,dID, cusFrame, this);
        cardPaymentFrame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_debitActionPerformed

    private void creditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditActionPerformed
        // TODO add your handling code here:
        CardPaymentFrame cardPaymentFrame = new CardPaymentFrame("Credit Card", cartItems, custID, restID,dID, cusFrame, this);
        cardPaymentFrame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_creditActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        this.dispose();
        prevFrame.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void UPIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPIActionPerformed
        // TODO add your handling code here:
        
        //ImageIcon qrIcon = new ImageIcon(getClass().getClassLoader().getResource("D:\\Users\\karpa\\Documents\\NetBeansProjects\\food_delivery\\src\\qr.png"));
        ImageIcon qrIcon = new ImageIcon("D:\\Users\\karpa\\Documents\\NetBeansProjects\\food_delivery\\src\\qr.png");
        // Scale the image to desired dimensions (width, height)
        Image scaledImage = qrIcon.getImage().getScaledInstance(350, 350, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(scaledImage);
        
        JOptionPane.showMessageDialog(this, scaledIcon, "UPI Payment", JOptionPane.PLAIN_MESSAGE);
        
        //update
        insert(1,"UPI");
        JOptionPane.showMessageDialog(this, "Order placed successfully!");
        this.setVisible(false);
        cusFrame.setVisible(true); 
    }//GEN-LAST:event_UPIActionPerformed

    private void cashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashActionPerformed
        // TODO add your handling code here:
        insert(0,"cod");
        JOptionPane.showMessageDialog(this, "Order placed successfully!");
        this.setVisible(false);
        cusFrame.setVisible(true);
        
    }//GEN-LAST:event_cashActionPerformed

    public void insert(int pay, String method) {
    fetchAvailableDeliveryPerson();
    PreparedStatement psOrder = null;
    PreparedStatement psOrderList = null;
    PreparedStatement psOrderId = null;
    PreparedStatement psPayment = null;
    PreparedStatement psTransactionId = null;
    PreparedStatement psGetItemId = null;
    String transactionId = null;
    String orderID = null;

    try {
        con.setAutoCommit(false); // Start transaction

        // Get the next sequence value for Order_id
        String getOrderSeqSQL = "SELECT 'O' || LPAD(order_seq.NEXTVAL, 5, '0') FROM dual";
        psOrderId = con.prepareStatement(getOrderSeqSQL);
        ResultSet rs = psOrderId.executeQuery();
        if (rs.next()) {
            orderID = rs.getString(1);
        }
        rs.close();
        psOrderId.close();

        if (!method.equalsIgnoreCase("cod")) {
            String getTransactionSeqSQL = "SELECT 'TXN' || LPAD(transaction_seq.NEXTVAL, 5, '0') FROM dual";
            psTransactionId = con.prepareStatement(getTransactionSeqSQL);
            ResultSet rsTxn = psTransactionId.executeQuery();
            if (rsTxn.next()) {
                transactionId = rsTxn.getString(1);
            }
            rsTxn.close();
            psTransactionId.close();
        }

        // Insert into Orders table
        String insertOrdersSQL = "INSERT INTO Orders (Order_id, Cust_id, Rest_id, D_id, Order_time, Status, Payment) VALUES (?, ?, ?, ?, SYSTIMESTAMP, ?, ?)";
        psOrder = con.prepareStatement(insertOrdersSQL);
        psOrder.setString(1, orderID); // Order_id
        psOrder.setString(2, custID);
        psOrder.setString(3, restID);
        psOrder.setString(4, dID);
        psOrder.setString(5, "received");
        psOrder.setString(6, pay == 1 ? "paid" : "unpaid");
        psOrder.executeUpdate();

        // Prepare statement to get Item_id from Item_name
        String getItemIdSQL = "SELECT Item_id FROM Items WHERE Item_name = ?";
        psGetItemId = con.prepareStatement(getItemIdSQL);

        // Insert into Order_list table for each item in cartItems
        String insertOrderListSQL = "INSERT INTO Order_list (Order_id, Item_id, Qty) VALUES (?, ?, ?)";
        psOrderList = con.prepareStatement(insertOrderListSQL);

        for (String[] item : cartItems) {
            String itemName = item[0]; // Assuming Item_name is the first element in item array
            int qty = Integer.parseInt(item[2]); // Assuming Qty is the second element in item array

            // Get Item_id from Item_name
            psGetItemId.setString(1, itemName);
            ResultSet rsItem = psGetItemId.executeQuery();
            String itemId = null;
            if (rsItem.next()) {
                itemId = rsItem.getString("Item_id");
            }
            rsItem.close();

            if (itemId == null) {
                throw new SQLException("Item_id not found for item name: " + itemName);
            }

            // Set parameters for the prepared statement
            psOrderList.setString(1, orderID); // Order_id
            psOrderList.setString(2, itemId); // Item_id
            psOrderList.setInt(3, qty); // Qty
            //System.out.println(qty);
            // Execute the insert statement for Order_list
            psOrderList.executeUpdate();
        }

        // Insert into Payment table
        String sqlPayment = "INSERT INTO Payment (Order_id, Method, Status, Transaction_id) VALUES (?, ?, ?, ?)";
        psPayment = con.prepareStatement(sqlPayment);
        psPayment.setString(1, orderID);
        psPayment.setString(2, method);
        psPayment.setString(3, "successful");
        if (transactionId != null) {
            psPayment.setString(4, transactionId);
        } else {
            psPayment.setNull(4, java.sql.Types.VARCHAR);
        }
        psPayment.executeUpdate();

        con.commit(); // Commit transaction

    } catch (SQLException ex) {
        if (con != null) {
            try {
                con.rollback(); // Rollback transaction on error
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        Logger.getLogger(PaymentFrame.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, ex.getMessage());
    } finally {
        try {
            if (psOrder != null) psOrder.close();
            if (psOrderList != null) psOrderList.close();
            if (psOrderId != null) psOrderId.close();
            if (psPayment != null) psPayment.close();
            if (psTransactionId != null) psTransactionId.close();
            if (psGetItemId != null) psGetItemId.close();
            if (con != null) con.setAutoCommit(true); // Reset autocommit mode
        } catch (SQLException ex) {
            Logger.getLogger(PaymentFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }
}

    
    
    public void fetchAvailableDeliveryPerson()
     {
         try {
            // SQL query
            String query = "SELECT D_id, Name, Phone_no, Location, Email " +
                           "FROM Delivery_person " +
                           "WHERE Free = 0 AND Location IS NOT NULL " +
                           "AND ROWNUM = 1"; // Limiting to one record
            
            // Prepare and execute the statement
            st = con.createStatement();
            rs = st.executeQuery(query);
            
            // Check if there's a result
            if (rs.next()) {
                this.dID = rs.getString("D_id");
                String name = rs.getString("Name");
                String phoneNo = rs.getString("Phone_no");
                String location = rs.getString("Location");
                String email = rs.getString("Email");
                
                // Process the delivery person record as needed
                //System.out.println("Delivery Person: " + dId + ", Name: " + name + ", Phone: " + phoneNo + ", Location: " + location + ", Email: " + email);
                String updateQuery = "UPDATE Delivery_person SET Free = 1 WHERE D_id = ?";
        
                // Prepare and execute the update statement
                ps = con.prepareStatement(updateQuery);
                ps.setString(1, this.dID);
                int rowsUpdated = ps.executeUpdate();

                if (rowsUpdated > 0) {
                    System.out.println("Delivery person status updated to Free.");
                } else {
                    System.out.println("Failed to update delivery person status.");
                }
            } else {
                System.out.println("No available delivery person found.");
                // Handle the case where no delivery person is available
            }
         }
         catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching address: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
            
            
            
     }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaymentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaymentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaymentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaymentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaymentFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UPI;
    private javax.swing.JButton back;
    private javax.swing.JButton cash;
    private javax.swing.JButton credit;
    private javax.swing.JButton debit;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
