/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.food_delivery;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author karpa
 */
public class CartFramee extends javax.swing.JFrame {
    Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
    private List<String[]> cartItems = new ArrayList<>();
    private final String[] columnNames = {"Item Name", "Price", "Quantity", "Total"};
    private MenuFrame prevFrame;
    String custID;
    String restID;
    String caddID;
    Customer cusFrame;
    /**
     * Creates new form CartFrame
     */
    public CartFramee(){}
    
    public CartFramee(List<String[]> cartItems, MenuFrame prevFrame, String custID, String restID, Customer cusFrame) {
        initComponents();
        try{
            Class.forName("oracle.jdbc.OracleDriver");
            //JOptionPane.showMessageDialog(this,"Driver Loaded!");
            try 
            {
                //con = DriverManager.getConnection("jdbc:oracle:thin:@10.6.4.33:1521:orcl",
                //        "cse1054","ssn");
                con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl",
                        "user","pwd!");
                //JOptionPane.showMessageDialog(this,"Connected to Oracle database!");
            }
            catch (SQLException ex) 
            {
                Logger.getLogger(Customer.class.getName()).log(Level.SEVERE,null, ex);
                JOptionPane.showMessageDialog(this,ex.getMessage());
            }
        }
        catch(ClassNotFoundException ex){
        Logger.getLogger(Customer.class.getName()).log(Level.SEVERE,null, ex);
        JOptionPane.showMessageDialog(this,ex.getMessage());

        }
        this.cartItems = cartItems;
        this.prevFrame = prevFrame;
        this.custID = custID;
        this.restID = restID;
        this.cusFrame = cusFrame;
        setTitle("Cart");
        populateCartTable();
        fetchAndDisplayAddress();
        //updateTotalAmount();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        decButton = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        cartLabel = new javax.swing.JLabel();
        totalAmountLabel = new javax.swing.JLabel();
        payButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        addTextArea = new javax.swing.JTextArea();
        changeAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        add = new javax.swing.JLabel();
        incButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        decButton.setText("-");
        decButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decButtonActionPerformed(evt);
            }
        });

        Back.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        cartLabel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        cartLabel.setText("Cart");

        totalAmountLabel.setText("tot");

        payButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        payButton.setText("Pay");
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        addTextArea.setColumns(20);
        addTextArea.setRows(5);
        jScrollPane2.setViewportView(addTextArea);

        changeAdd.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        changeAdd.setText("Change Address");
        changeAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeAddActionPerformed(evt);
            }
        });

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cartTable);
        if (cartTable.getColumnModel().getColumnCount() > 0) {
            cartTable.getColumnModel().getColumn(0).setResizable(false);
            cartTable.getColumnModel().getColumn(1).setResizable(false);
            cartTable.getColumnModel().getColumn(2).setResizable(false);
            cartTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add.setText("Address : ");

        incButton.setText("+");
        incButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(333, 333, 333)
                        .addComponent(cartLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(62, 62, 62)
                                        .addComponent(Back)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(83, 83, 83)
                                        .addComponent(changeAdd))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(payButton)
                                        .addGap(121, 121, 121))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(totalAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(incButton)
                                    .addComponent(decButton)))
                            .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(incButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(decButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(cartLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalAmountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(add)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(changeAdd)
                        .addGap(86, 86, 86)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payButton)
                            .addComponent(Back))
                        .addGap(39, 39, 39))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void incButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = cartTable.getSelectedRow();
        if (selectedRow != -1) {
            String[] item = cartItems.get(selectedRow);
            int quantity = Integer.parseInt(item[2]) + 1;
            item[2] = String.valueOf(quantity);
            item[3] = String.valueOf(Double.parseDouble(item[1]) * quantity);
            updateCartTable();
        }
    }//GEN-LAST:event_incButtonActionPerformed

    private void decButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = cartTable.getSelectedRow();
        if (selectedRow != -1) {
            String[] item = cartItems.get(selectedRow);
            int quantity = Integer.parseInt(item[2]) - 1;
            if (quantity <= 0) {
                cartItems.remove(selectedRow);
            } else {
                item[2] = String.valueOf(quantity);
                item[3] = String.valueOf(Double.parseDouble(item[1]) * quantity);
            }
            updateCartTable();
        }
    }//GEN-LAST:event_decButtonActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        this.dispose();
        prevFrame.setVisible(true);
    }//GEN-LAST:event_BackActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        // TODO add your handling code here:
        PaymentFrame paymentFrame = new PaymentFrame(this, cartItems, custID, restID, cusFrame);
        paymentFrame.setVisible(true);
        this.setVisible(false);
        prevFrame.setVisible(false);
    }//GEN-LAST:event_payButtonActionPerformed

    private void changeAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeAddActionPerformed
        // TODO add your handling code here:
        try {
            // Fetch all addresses for the customer
            String sql = "SELECT * FROM Address WHERE Cust_id = ? ORDER BY Block_num ASC";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, custID);
            ResultSet rs = ps.executeQuery();
            String sqll = "SELECT calculate_order_total(?) FROM dual;";
            
            // Create a list to hold addresses
            DefaultListModel<String> listModel = new DefaultListModel<>();
            
            while (rs.next()) {
                String address = getAddressFromResultSet(rs);
                listModel.addElement(address); // Add each address to the list model
            }
            
            rs.close();
            ps.close();
            
            // Display addresses in a JList
            JList<String> addressList = new JList<>(listModel);
            JOptionPane.showMessageDialog(this, new JScrollPane(addressList), "Select Address", JOptionPane.PLAIN_MESSAGE);
            
            // Check if an address was selected
            if (!addressList.isSelectionEmpty()) {
                String selectedAddress = addressList.getSelectedValue();
                // Extract Add_id from selectedAddress (assuming it's formatted with Address ID first)
                caddID = selectedAddress.split("\n")[0].split(": ")[1];
                addTextArea.setText(selectedAddress); // Show the selected address
            }
            System.out.println(sqll);
            
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching addresses: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_changeAddActionPerformed

    private void updateCartTable() {
        populateCartTable();
    }

    private void calculateTotalAmount() {
        double total = 0;
        for (String[] item : cartItems) {
            total += Double.parseDouble(item[3]);
        }
        totalAmountLabel.setText("Total: ₹" + String.format("%.2f", total));
    }
    
    public void addItemToCart(String[] newItem) {
    String itemName = newItem[0];
    boolean itemExists = false;

    // Check if the item already exists in the cart
    for (String[] item : cartItems) {
        if (item[0] != null && item[0].equals(itemName)) {
            itemExists = true;
            // Update the quantity and total price for the existing item
            updateQuantityForItem(itemName, 1);
            break;
        }
    }

    // If the item doesn't exist, add it to the cart
    if (!itemExists) {
        cartItems.add(newItem);
    }

    // Refresh the cart table to reflect the changes
    populateCartTable();
}




    
    private void updateQuantityForItem(String itemName, int change) {
        for (String[] item : cartItems) {
            if (item[0].equals(itemName)) {
                int quantity = Integer.parseInt(item[2]) + change;
                if (quantity > 0) {
                    item[2] = String.valueOf(quantity);
                    item[3] = String.valueOf(Double.parseDouble(item[1]) * quantity);
                } else {
                    cartItems.remove(item);
                }
                return;
            }
        }
    }

    private void populateCartTable() {
        DefaultTableModel model = new DefaultTableModel(cartItems.toArray(new Object[][]{}), columnNames);
        cartTable.setModel(model);
        calculateTotalAmount();
    }
    
     private void ppopulateCartTable() {
        DefaultTableModel model = new DefaultTableModel(cartItems.toArray(new String[0][]), columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        for (int i = 0; i < cartItems.size(); i++) {
            String[] item = cartItems.get(i);
            double price = Double.parseDouble(item[1]);
            int quantity = Integer.parseInt(item[2]);
            double total = price * quantity;
            model.setValueAt(String.format("%.2f", total), i, 3);
        }
           updateTotalAmount();
        cartTable.setModel(model);
    }

     
     private void updateQuantity(int change) {
        int selectedRow = cartTable.getSelectedRow();
        if (selectedRow != -1) {
            int quantity = Integer.parseInt((String) cartTable.getValueAt(selectedRow, 2));
            quantity += change;
            if (quantity > 0) {
                cartTable.setValueAt(String.valueOf(quantity), selectedRow, 2);
                cartItems.get(selectedRow)[2] = String.valueOf(quantity); // Update cartItems list
                double price = Double.parseDouble((String) cartTable.getValueAt(selectedRow, 1));
                double total = price * quantity;
                cartTable.setValueAt(String.format("%.2f", total), selectedRow, 3);
            } else {
                ((DefaultTableModel) cartTable.getModel()).removeRow(selectedRow);
                cartItems.remove(selectedRow); // Remove item from cartItems list
            }
            updateTotalAmount();
        }
    }
     
    public void setCartItems(List<String[]> cartItems) {
        this.cartItems = cartItems;
        populateCartTable();
        updateTotalAmount();
    }
    
     private void updateTotalAmount() {
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
        double totalAmount = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            double total = Double.parseDouble((String) model.getValueAt(i, 3));
            totalAmount += total;
        }
        totalAmountLabel.setText("Total Amount: ₹" + String.format("%.2f", totalAmount));
    }
     
     
     
     private void fetchAndDisplayAddress() {
        try {
            String sql = "SELECT * FROM Address WHERE Cust_id = ? ORDER BY Block_num ASC";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, custID);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                // Display the top address (assuming only one address is shown)
                caddID = rs.getString("Add_id"); // Store the Address ID
                String address = getAddressFromResultSet(rs);
                addTextArea.setText(address);
            } else {
                // No address found for this customer
                addTextArea.setText("No address found for customer ID: " + custID);
            }
            
            rs.close();
            ps.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching address: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
     
     private String getAddressFromResultSet(ResultSet rs) throws SQLException {
        StringBuilder sb = new StringBuilder();
        //sb.append("Address ID: ").append(rs.getString("Add_id")).append("\n");
        sb.append("Block Number: ").append(rs.getInt("Block_num")).append("\n");
        sb.append("Street: ").append(rs.getString("Street")).append("\n");
        sb.append("Area: ").append(rs.getString("Area")).append("\n");
        sb.append("Pincode: ").append(rs.getString("Pincode")).append("\n");
        return sb.toString();
    }
     
     
    
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CartFramee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CartFramee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CartFramee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CartFramee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CartFramee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JLabel add;
    private javax.swing.JTextArea addTextArea;
    private javax.swing.JLabel cartLabel;
    private javax.swing.JTable cartTable;
    private javax.swing.JButton changeAdd;
    private javax.swing.JButton decButton;
    private javax.swing.JButton incButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton payButton;
    private javax.swing.JLabel totalAmountLabel;
    // End of variables declaration//GEN-END:variables
}
